/*
 * Copyright (c) 2010, 2023 BSI Business Systems Integration AG
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.scout.sdk.core.java.generator.type;

import static org.eclipse.scout.sdk.core.java.testing.SdkJavaAssertions.assertEqualsRefFile;
import static org.eclipse.scout.sdk.core.java.testing.SdkJavaAssertions.assertMethodExist;
import static org.eclipse.scout.sdk.core.java.testing.SdkJavaAssertions.assertNoCompileErrors;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.concurrent.atomic.AtomicInteger;

import org.eclipse.scout.sdk.core.java.JavaTypes;
import org.eclipse.scout.sdk.core.java.builder.body.IMethodBodyBuilder;
import org.eclipse.scout.sdk.core.java.generator.annotation.AnnotationGenerator;
import org.eclipse.scout.sdk.core.java.generator.field.FieldGenerator;
import org.eclipse.scout.sdk.core.java.generator.method.MethodGenerator;
import org.eclipse.scout.sdk.core.java.model.api.Flags;
import org.eclipse.scout.sdk.core.java.model.api.IJavaEnvironment;
import org.eclipse.scout.sdk.core.java.testing.FixtureHelper.CoreJavaEnvironmentWithSourceFactory;
import org.eclipse.scout.sdk.core.java.testing.context.DefaultCommentGeneratorExtension;
import org.eclipse.scout.sdk.core.java.testing.context.ExtendWithJavaEnvironmentFactory;
import org.eclipse.scout.sdk.core.java.testing.context.UsernameExtension;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

/**
 * <h3>{@link PrimaryTypeGeneratorTest}</h3>
 *
 * @since 6.1.0
 */
@ExtendWith(UsernameExtension.class)
@ExtendWith(DefaultCommentGeneratorExtension.class)
@ExtendWithJavaEnvironmentFactory(CoreJavaEnvironmentWithSourceFactory.class)
public class PrimaryTypeGeneratorTest {

  private static final String REF_FILE_FOLDER = "org/eclipse/scout/sdk/core/java/generator/type/";

  @Test
  public void testPrimaryTypeGenerator(IJavaEnvironment env) {
    var generator = PrimaryTypeGenerator.create()
        .withPackageName("a.b.c")
        .withElementName("PrimaryType");

    assertEqualsRefFile(env, REF_FILE_FOLDER + "PrimaryTypeGeneratorTest1.txt", generator);
    assertNoCompileErrors(env, generator);
  }

  @Test
  public void testSpecificGenerator(IJavaEnvironment env) {
    PrimaryTypeGenerator<? extends PrimaryTypeGenerator<?>> generator = new P_TestingPrimaryTypeGenerator()
        .withPackageName("a.b.c")
        .withElementName("TestingPrimaryType");

    assertEqualsRefFile(env, REF_FILE_FOLDER + "PrimaryTypeGeneratorTest2.txt", generator);
    assertNoCompileErrors(env, generator);
  }

  @Test
  public void testMultipleExecutions(IJavaEnvironment env) {
    var generator = new P_TestingMultipleExecutionsTypeGenerator().withElementName("TestClass");

    var result1 = assertNoCompileErrors(env, generator);
    assertEquals(1, result1.methods().stream().count());
    assertMethodExist(result1, "num1");

    var result2 = assertNoCompileErrors(env, generator);
    assertEquals(1, result2.methods().stream().count());
    assertMethodExist(result2, "num1"); // because setup is only executed once
  }

  private static final class P_TestingMultipleExecutionsTypeGenerator extends PrimaryTypeGenerator<P_TestingMultipleExecutionsTypeGenerator> {

    private static final AtomicInteger COUNTER = new AtomicInteger();

    @Override
    protected void setup() {
      withMethod(MethodGenerator.create()
          .asPublic()
          .withReturnType(JavaTypes._void)
          .withElementName("num" + COUNTER.incrementAndGet()));
    }
  }

  private static final class P_TestingPrimaryTypeGenerator extends PrimaryTypeGenerator<P_TestingPrimaryTypeGenerator> {
    @Override
    protected void setup() {
      this
          .withField(FieldGenerator.create()
              .withElementName("m_member")
              .withDataType(JavaTypes._boolean)
              .withFlags(Flags.AccPrivate))
          .withField(FieldGenerator.createSerialVersionUid())
          .withMethod(MethodGenerator.create()
              .asPublic()
              .withAnnotation(AnnotationGenerator.createDeprecated())
              .withElementName("testMethod")
              .withBody(IMethodBodyBuilder::appendAutoGenerated)
              .withReturnType(JavaTypes._void));
    }
  }
}
