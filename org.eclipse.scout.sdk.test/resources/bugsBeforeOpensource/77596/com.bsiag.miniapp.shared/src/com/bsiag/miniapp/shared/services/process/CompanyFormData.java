/*******************************************************************************
 * Copyright (c) 2010 BSI Business Systems Integration AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     BSI Business Systems Integration AG - initial API and implementation
 ******************************************************************************/
package com.bsiag.miniapp.shared.services.process;

import java.util.Date;
import java.util.Map;
import java.util.Set;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.ValidationRule;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class CompanyFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public CompanyFormData() {
  }

  public Active getActive() {
    return getFieldByClass(Active.class);
  }

  public AdditionalInformationTable getAdditionalInformationTable() {
    return getFieldByClass(AdditionalInformationTable.class);
  }

  public AddressTable getAddressTable() {
    return getFieldByClass(AddressTable.class);
  }

  public ChangesTable getChangesTable() {
    return getFieldByClass(ChangesTable.class);
  }

  public CompanyNo getCompanyNo() {
    return getFieldByClass(CompanyNo.class);
  }

  /**
   * access method for property CompanyNr.
   */
  public Long getCompanyNr() {
    return getCompanyNrProperty().getValue();
  }

  /**
   * access method for property CompanyNr.
   */
  public void setCompanyNr(Long companyNr) {
    getCompanyNrProperty().setValue(companyNr);
  }

  public CompanyNrProperty getCompanyNrProperty() {
    return getPropertyByClass(CompanyNrProperty.class);
  }

  public CompanyShortName getCompanyShortName() {
    return getFieldByClass(CompanyShortName.class);
  }

  public CompanyType getCompanyType() {
    return getFieldByClass(CompanyType.class);
  }

  public DocumentTable getDocumentTable() {
    return getFieldByClass(DocumentTable.class);
  }

  public FiguresTable getFiguresTable() {
    return getFieldByClass(FiguresTable.class);
  }

  public FiguresYtDTable getFiguresYtDTable() {
    return getFieldByClass(FiguresYtDTable.class);
  }

  /**
   * access method for property Internal.
   */
  public boolean isInternal() {
    return (getInternalProperty().getValue() == null) ? (false) : (getInternalProperty().getValue());
  }

  /**
   * access method for property Internal.
   */
  public void setInternal(boolean internal) {
    getInternalProperty().setValue(internal);
  }

  public InternalProperty getInternalProperty() {
    return getPropertyByClass(InternalProperty.class);
  }

  public InvoicesDue getInvoicesDue() {
    return getFieldByClass(InvoicesDue.class);
  }

  public Language getLanguage() {
    return getFieldByClass(Language.class);
  }

  public MainAccountManager getMainAccountManager() {
    return getFieldByClass(MainAccountManager.class);
  }

  public Name getName() {
    return getFieldByClass(Name.class);
  }

  public Notes getNotes() {
    return getFieldByClass(Notes.class);
  }

  public OpenBills getOpenBills() {
    return getFieldByClass(OpenBills.class);
  }

  public Rating getRating() {
    return getFieldByClass(Rating.class);
  }

  public Region getRegion() {
    return getFieldByClass(Region.class);
  }

  public Sector getSector() {
    return getFieldByClass(Sector.class);
  }

  public static class Active extends AbstractValueFieldData<Boolean> {

    private static final long serialVersionUID = 1L;

    public Active() {
    }
  }

  public static class AdditionalInformationTable extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    public AdditionalInformationTable() {
    }

    @Override
    public AdditionalInformationTableRowData addRow() {
      return (AdditionalInformationTableRowData) super.addRow();
    }

    @Override
    public AdditionalInformationTableRowData addRow(int rowState) {
      return (AdditionalInformationTableRowData) super.addRow(rowState);
    }

    @Override
    public AdditionalInformationTableRowData createRow() {
      return new AdditionalInformationTableRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return AdditionalInformationTableRowData.class;
    }

    @Override
    public AdditionalInformationTableRowData[] getRows() {
      return (AdditionalInformationTableRowData[]) super.getRows();
    }

    @Override
    public AdditionalInformationTableRowData rowAt(int index) {
      return (AdditionalInformationTableRowData) super.rowAt(index);
    }

    public void setRows(AdditionalInformationTableRowData[] rows) {
      super.setRows(rows);
    }

    public static class AdditionalInformationTableRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String additionalInformation = "additionalInformation";
      public static final String display = "display";
      public static final String text = "text";
      public static final String number = "number";
      public static final String date = "date";
      private Long m_additionalInformation;
      private String m_display;
      private String m_text;
      private Double m_number;
      private Date m_date;

      public AdditionalInformationTableRowData() {
      }

      public Long getAdditionalInformation() {
        return m_additionalInformation;
      }

      public void setAdditionalInformation(Long additionalInformation) {
        m_additionalInformation = additionalInformation;
      }

      public String getDisplay() {
        return m_display;
      }

      public void setDisplay(String display) {
        m_display = display;
      }

      public String getText() {
        return m_text;
      }

      public void setText(String text) {
        m_text = text;
      }

      public Double getNumber() {
        return m_number;
      }

      public void setNumber(Double number) {
        m_number = number;
      }

      public Date getDate() {
        return m_date;
      }

      public void setDate(Date date) {
        m_date = date;
      }
    }
  }

  public static class AddressTable extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    public AddressTable() {
    }

    @Override
    public AddressTableRowData addRow() {
      return (AddressTableRowData) super.addRow();
    }

    @Override
    public AddressTableRowData addRow(int rowState) {
      return (AddressTableRowData) super.addRow(rowState);
    }

    @Override
    public AddressTableRowData createRow() {
      return new AddressTableRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return AddressTableRowData.class;
    }

    @Override
    public AddressTableRowData[] getRows() {
      return (AddressTableRowData[]) super.getRows();
    }

    @Override
    public AddressTableRowData rowAt(int index) {
      return (AddressTableRowData) super.rowAt(index);
    }

    public void setRows(AddressTableRowData[] rows) {
      super.setRows(rows);
    }

    public static class AddressTableRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String addressType = "addressType";
      public static final String additionalName = "additionalName";
      public static final String street = "street";
      public static final String pOBox = "pOBox";
      public static final String city = "city";
      public static final String phone = "phone";
      public static final String fax = "fax";
      public static final String eMail = "eMail";
      public static final String www = "www";
      private Long m_addressType;
      private String m_additionalName;
      private String m_street;
      private String m_pOBox;
      private Long m_city;
      private String m_phone;
      private String m_fax;
      private String m_eMail;
      private String m_www;

      public AddressTableRowData() {
      }

      public Long getAddressType() {
        return m_addressType;
      }

      public void setAddressType(Long addressType) {
        m_addressType = addressType;
      }

      public String getAdditionalName() {
        return m_additionalName;
      }

      public void setAdditionalName(String additionalName) {
        m_additionalName = additionalName;
      }

      public String getStreet() {
        return m_street;
      }

      public void setStreet(String street) {
        m_street = street;
      }

      public String getPOBox() {
        return m_pOBox;
      }

      public void setPOBox(String pOBox) {
        m_pOBox = pOBox;
      }

      public Long getCity() {
        return m_city;
      }

      public void setCity(Long city) {
        m_city = city;
      }

      public String getPhone() {
        return m_phone;
      }

      public void setPhone(String phone) {
        m_phone = phone;
      }

      public String getFax() {
        return m_fax;
      }

      public void setFax(String fax) {
        m_fax = fax;
      }

      public String getEMail() {
        return m_eMail;
      }

      public void setEMail(String eMail) {
        m_eMail = eMail;
      }

      public String getWww() {
        return m_www;
      }

      public void setWww(String www) {
        m_www = www;
      }
    }
  }

  public static class ChangesTable extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    public ChangesTable() {
    }

    @Override
    public ChangesTableRowData addRow() {
      return (ChangesTableRowData) super.addRow();
    }

    @Override
    public ChangesTableRowData addRow(int rowState) {
      return (ChangesTableRowData) super.addRow(rowState);
    }

    @Override
    public ChangesTableRowData createRow() {
      return new ChangesTableRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return ChangesTableRowData.class;
    }

    @Override
    public ChangesTableRowData[] getRows() {
      return (ChangesTableRowData[]) super.getRows();
    }

    @Override
    public ChangesTableRowData rowAt(int index) {
      return (ChangesTableRowData) super.rowAt(index);
    }

    public void setRows(ChangesTableRowData[] rows) {
      super.setRows(rows);
    }

    public static class ChangesTableRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String type = "type";
      public static final String person = "person";
      public static final String date = "date";
      public static final String mainAccountManager = "mainAccountManager";
      private Long m_type;
      private String m_person;
      private Date m_date;
      private String m_mainAccountManager;

      public ChangesTableRowData() {
      }

      public Long getType() {
        return m_type;
      }

      public void setType(Long type) {
        m_type = type;
      }

      public String getPerson() {
        return m_person;
      }

      public void setPerson(String person) {
        m_person = person;
      }

      public Date getDate() {
        return m_date;
      }

      public void setDate(Date date) {
        m_date = date;
      }

      public String getMainAccountManager() {
        return m_mainAccountManager;
      }

      public void setMainAccountManager(String mainAccountManager) {
        m_mainAccountManager = mainAccountManager;
      }
    }
  }

  public static class CompanyNo extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public CompanyNo() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 60);
    }
  }

  public static class CompanyNrProperty extends AbstractPropertyData<Long> {

    private static final long serialVersionUID = 1L;

    public CompanyNrProperty() {
    }
  }

  public static class CompanyShortName extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public CompanyShortName() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.MAX_LENGTH, 60);
    }
  }

  public static class CompanyType extends AbstractValueFieldData<Set<Long>> {

    private static final long serialVersionUID = 1L;

    public CompanyType() {
    }
  }

  public static class DocumentTable extends AbstractDocumentTableFieldData {

    private static final long serialVersionUID = 1L;

    public DocumentTable() {
    }
  }

  public static class FiguresTable extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    public FiguresTable() {
    }

    @Override
    public FiguresTableRowData addRow() {
      return (FiguresTableRowData) super.addRow();
    }

    @Override
    public FiguresTableRowData addRow(int rowState) {
      return (FiguresTableRowData) super.addRow(rowState);
    }

    @Override
    public FiguresTableRowData createRow() {
      return new FiguresTableRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return FiguresTableRowData.class;
    }

    @Override
    public FiguresTableRowData[] getRows() {
      return (FiguresTableRowData[]) super.getRows();
    }

    @Override
    public FiguresTableRowData rowAt(int index) {
      return (FiguresTableRowData) super.rowAt(index);
    }

    public void setRows(FiguresTableRowData[] rows) {
      super.setRows(rows);
    }

    public static class FiguresTableRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String year = "year";
      public static final String potential = "potential";
      public static final String budget = "budget";
      public static final String turnover = "turnover";
      private Long m_year;
      private Long m_potential;
      private Long m_budget;
      private Long m_turnover;

      public FiguresTableRowData() {
      }

      public Long getYear() {
        return m_year;
      }

      public void setYear(Long year) {
        m_year = year;
      }

      public Long getPotential() {
        return m_potential;
      }

      public void setPotential(Long potential) {
        m_potential = potential;
      }

      public Long getBudget() {
        return m_budget;
      }

      public void setBudget(Long budget) {
        m_budget = budget;
      }

      public Long getTurnover() {
        return m_turnover;
      }

      public void setTurnover(Long turnover) {
        m_turnover = turnover;
      }
    }
  }

  public static class FiguresYtDTable extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    public FiguresYtDTable() {
    }

    @Override
    public FiguresYtDTableRowData addRow() {
      return (FiguresYtDTableRowData) super.addRow();
    }

    @Override
    public FiguresYtDTableRowData addRow(int rowState) {
      return (FiguresYtDTableRowData) super.addRow(rowState);
    }

    @Override
    public FiguresYtDTableRowData createRow() {
      return new FiguresYtDTableRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return FiguresYtDTableRowData.class;
    }

    @Override
    public FiguresYtDTableRowData[] getRows() {
      return (FiguresYtDTableRowData[]) super.getRows();
    }

    @Override
    public FiguresYtDTableRowData rowAt(int index) {
      return (FiguresYtDTableRowData) super.rowAt(index);
    }

    public void setRows(FiguresYtDTableRowData[] rows) {
      super.setRows(rows);
    }

    public static class FiguresYtDTableRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String year = "year";
      public static final String potential = "potential";
      public static final String budget = "budget";
      public static final String turnover = "turnover";
      private Long m_year;
      private Long m_potential;
      private Long m_budget;
      private Long m_turnover;

      public FiguresYtDTableRowData() {
      }

      public Long getYear() {
        return m_year;
      }

      public void setYear(Long year) {
        m_year = year;
      }

      public Long getPotential() {
        return m_potential;
      }

      public void setPotential(Long potential) {
        m_potential = potential;
      }

      public Long getBudget() {
        return m_budget;
      }

      public void setBudget(Long budget) {
        m_budget = budget;
      }

      public Long getTurnover() {
        return m_turnover;
      }

      public void setTurnover(Long turnover) {
        m_turnover = turnover;
      }
    }
  }

  public static class InternalProperty extends AbstractPropertyData<Boolean> {

    private static final long serialVersionUID = 1L;

    public InternalProperty() {
    }
  }

  public static class InvoicesDue extends AbstractValueFieldData<Double> {

    private static final long serialVersionUID = 1L;

    public InvoicesDue() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_VALUE, 999999999.0);
      ruleMap.put(ValidationRule.MIN_VALUE, -999999999.0);
    }
  }

  public static class Language extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public Language() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }

  public static class MainAccountManager extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public MainAccountManager() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }

  public static class Name extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Name() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.MAX_LENGTH, 250);
    }
  }

  public static class Notes extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Notes() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 2000);
    }
  }

  public static class OpenBills extends AbstractValueFieldData<Double> {

    private static final long serialVersionUID = 1L;

    public OpenBills() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_VALUE, 999999999.0);
      ruleMap.put(ValidationRule.MIN_VALUE, -999999999.0);
    }
  }

  public static class Rating extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public Rating() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }

  public static class Region extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public Region() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }

  public static class Sector extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;

    public Sector() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }
}
