/**
 * 
 */
package sample.shared.person;

import java.util.Date;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.composer.AbstractComposerData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class PersonFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public PersonFormData() {
  }

  /**
   * access method for property AnyProperty.
   */
  public String getAnyProperty() {
    return getAnyPropertyProperty().getValue();
  }

  /**
   * access method for property AnyProperty.
   */
  public void setAnyProperty(String anyProperty) {
    getAnyPropertyProperty().setValue(anyProperty);
  }

  public AnyPropertyProperty getAnyPropertyProperty() {
    return getPropertyByClass(AnyPropertyProperty.class);
  }

  public Calendar getCalendar() {
    return getFieldByClass(Calendar.class);
  }

  public Composer getComposer() {
    return getFieldByClass(Composer.class);
  }

  public EmptyTable getEmptyTable() {
    return getFieldByClass(EmptyTable.class);
  }

  /**
   * access method for property PersonId.
   */
  public Long getPersonId() {
    return getPersonIdProperty().getValue();
  }

  /**
   * access method for property PersonId.
   */
  public void setPersonId(Long personId) {
    getPersonIdProperty().setValue(personId);
  }

  public PersonIdProperty getPersonIdProperty() {
    return getPropertyByClass(PersonIdProperty.class);
  }

  public Table getTable() {
    return getFieldByClass(Table.class);
  }

  public static class AnyPropertyProperty extends AbstractPropertyData<String> {

    private static final long serialVersionUID = 1L;

    public AnyPropertyProperty() {
    }
  }

  public static class Calendar extends AbstractValueFieldData<Date> {

    private static final long serialVersionUID = 1L;

    public Calendar() {
    }
  }

  public static class Composer extends AbstractComposerData {

    private static final long serialVersionUID = 1L;

    public Composer() {
    }
  }

  public static class EmptyTable extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    public EmptyTable() {
    }

    @Override
    public EmptyTableRowData addRow() {
      return (EmptyTableRowData) super.addRow();
    }

    @Override
    public EmptyTableRowData addRow(int rowState) {
      return (EmptyTableRowData) super.addRow(rowState);
    }

    @Override
    public EmptyTableRowData createRow() {
      return new EmptyTableRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return EmptyTableRowData.class;
    }

    @Override
    public EmptyTableRowData[] getRows() {
      return (EmptyTableRowData[]) super.getRows();
    }

    @Override
    public EmptyTableRowData rowAt(int index) {
      return (EmptyTableRowData) super.rowAt(index);
    }

    public void setRows(EmptyTableRowData[] rows) {
      super.setRows(rows);
    }

    public static class EmptyTableRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;

      public EmptyTableRowData() {
      }
    }
  }

  public static class PersonIdProperty extends AbstractPropertyData<Long> {

    private static final long serialVersionUID = 1L;

    public PersonIdProperty() {
    }
  }

  public static class Table extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    public Table() {
    }

    @Override
    public TableRowData addRow() {
      return (TableRowData) super.addRow();
    }

    @Override
    public TableRowData addRow(int rowState) {
      return (TableRowData) super.addRow(rowState);
    }

    @Override
    public TableRowData createRow() {
      return new TableRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return TableRowData.class;
    }

    @Override
    public TableRowData[] getRows() {
      return (TableRowData[]) super.getRows();
    }

    @Override
    public TableRowData rowAt(int index) {
      return (TableRowData) super.rowAt(index);
    }

    public void setRows(TableRowData[] rows) {
      super.setRows(rows);
    }

    public static class TableRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String double_ = "double";
      public static final String long_ = "long";
      public static final String string = "string";
      private Double m_double;
      private Long m_long;
      private String m_string;

      public TableRowData() {
      }

      /**
       * @return the Double
       */
      public Double getDouble() {
        return m_double;
      }

      /**
       * @param doubleValue
       *          the Double to set
       */
      public void setDouble(Double doubleValue) {
        m_double = doubleValue;
      }

      /**
       * @return the Long
       */
      public Long getLong() {
        return m_long;
      }

      /**
       * @param longValue
       *          the Long to set
       */
      public void setLong(Long longValue) {
        m_long = longValue;
      }

      /**
       * @return the String
       */
      public String getString() {
        return m_string;
      }

      /**
       * @param string
       *          the String to set
       */
      public void setString(String string) {
        m_string = string;
      }
    }
  }
}
