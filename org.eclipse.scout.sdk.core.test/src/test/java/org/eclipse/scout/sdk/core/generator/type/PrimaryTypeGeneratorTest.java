/*
 * Copyright (c) 2010-2020 BSI Business Systems Integration AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BSI Business Systems Integration AG - initial API and implementation
 */
package org.eclipse.scout.sdk.core.generator.type;

import static org.eclipse.scout.sdk.core.testing.SdkAssertions.assertEqualsRefFile;
import static org.eclipse.scout.sdk.core.testing.SdkAssertions.assertNoCompileErrors;

import org.eclipse.scout.sdk.core.builder.java.body.IMethodBodyBuilder;
import org.eclipse.scout.sdk.core.generator.annotation.AnnotationGenerator;
import org.eclipse.scout.sdk.core.generator.field.FieldGenerator;
import org.eclipse.scout.sdk.core.generator.method.MethodGenerator;
import org.eclipse.scout.sdk.core.model.api.Flags;
import org.eclipse.scout.sdk.core.model.api.IJavaEnvironment;
import org.eclipse.scout.sdk.core.testing.FixtureHelper.CoreJavaEnvironmentWithSourceFactory;
import org.eclipse.scout.sdk.core.testing.context.DefaultCommentGeneratorExtension;
import org.eclipse.scout.sdk.core.testing.context.ExtendWithJavaEnvironmentFactory;
import org.eclipse.scout.sdk.core.testing.context.JavaEnvironmentExtension;
import org.eclipse.scout.sdk.core.testing.context.UsernameExtension;
import org.eclipse.scout.sdk.core.util.JavaTypes;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

/**
 * <h3>{@link PrimaryTypeGeneratorTest}</h3>
 *
 * @since 6.1.0
 */
@ExtendWith(UsernameExtension.class)
@ExtendWith(JavaEnvironmentExtension.class)
@ExtendWith(DefaultCommentGeneratorExtension.class)
@ExtendWithJavaEnvironmentFactory(CoreJavaEnvironmentWithSourceFactory.class)
public class PrimaryTypeGeneratorTest {

  private static final String REF_FILE_FOLDER = "org/eclipse/scout/sdk/core/generator/type/";

  @Test
  public void testPrimaryTypeGenerator(IJavaEnvironment env) {
    var generator = PrimaryTypeGenerator.create()
        .withPackageName("a.b.c")
        .withElementName("PrimaryType");

    assertEqualsRefFile(env, REF_FILE_FOLDER + "PrimaryTypeGeneratorTest1.txt", generator);
    assertNoCompileErrors(env, generator);
  }

  @Test
  public void testSpecificGenerator(IJavaEnvironment env) {
    PrimaryTypeGenerator<? extends PrimaryTypeGenerator<?>> generator = new P_TestingPrimaryTypeGenerator()
        .withPackageName("a.b.c")
        .withElementName("TestingPrimaryType");

    assertEqualsRefFile(env, REF_FILE_FOLDER + "PrimaryTypeGeneratorTest2.txt", generator);
    assertNoCompileErrors(env, generator);
  }

  private static final class P_TestingPrimaryTypeGenerator extends PrimaryTypeGenerator<P_TestingPrimaryTypeGenerator> {
    @Override
    protected void fillMainType(ITypeGenerator<? extends ITypeGenerator<?>> mainType) {
      mainType
          .withField(FieldGenerator.create()
              .withElementName("m_member")
              .withDataType(JavaTypes._boolean)
              .withFlags(Flags.AccPrivate))
          .withField(FieldGenerator.createSerialVersionUid())
          .withMethod(MethodGenerator.create()
              .asPublic()
              .withAnnotation(AnnotationGenerator.createDeprecated())
              .withElementName("testMethod")
              .withBody(IMethodBodyBuilder::appendAutoGenerated)
              .withReturnType(JavaTypes._void));
    }
  }
}
