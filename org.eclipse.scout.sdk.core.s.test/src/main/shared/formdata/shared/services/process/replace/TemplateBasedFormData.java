/*******************************************************************************
 * Copyright (c) 2010 BSI Business Systems Integration AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     BSI Business Systems Integration AG - initial API and implementation
 ******************************************************************************/
package formdata.shared.services.process.replace;

import java.util.Map;

import javax.annotation.Generated;

import org.eclipse.scout.commons.annotations.Replace;
import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.ValidationRule;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class TemplateBasedFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public TemplateBasedFormData() {
  }

  public UsageOneBox getUsageOneBox() {
    return getFieldByClass(UsageOneBox.class);
  }

  public UsageTwoBox getUsageTwoBox() {
    return getFieldByClass(UsageTwoBox.class);
  }

  public UsualString getUsualString() {
    return getFieldByClass(UsualString.class);
  }

  public static class UsageOneBox extends AbstractTemplateForReplaceBoxData {

    private static final long serialVersionUID = 1L;

    public UsageOneBox() {
    }

    public UsageOneString getUsageOneString() {
      return getFieldByClass(UsageOneString.class);
    }

    public static class UsageOneString extends AbstractValueFieldData<String> {

      private static final long serialVersionUID = 1L;

      public UsageOneString() {
      }

      /**
       * list of derived validation rules.
       */
      @Override
      protected void initValidationRules(Map<String, Object> ruleMap) {
        super.initValidationRules(ruleMap);
        ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
      }
    }
  }

  public static class UsageTwoBox extends AbstractTemplateForReplaceBoxData {

    private static final long serialVersionUID = 1L;

    public UsageTwoBox() {
    }

    public UsageTwoTemplateTable getUsageTwoTemplateTable() {
      return getFieldByClass(UsageTwoTemplateTable.class);
    }

    @Replace
    public static class UsageTwoTemplateTable extends TemplateTable {

      private static final long serialVersionUID = 1L;

      public UsageTwoTemplateTable() {
      }

      @Override
      public UsageTwoTemplateTableRowData addRow() {
        return (UsageTwoTemplateTableRowData) super.addRow();
      }

      @Override
      public UsageTwoTemplateTableRowData addRow(int rowState) {
        return (UsageTwoTemplateTableRowData) super.addRow(rowState);
      }

      @Override
      public UsageTwoTemplateTableRowData createRow() {
        return new UsageTwoTemplateTableRowData();
      }

      @Override
      public Class<? extends AbstractTableRowData> getRowType() {
        return UsageTwoTemplateTableRowData.class;
      }

      @Override
      public UsageTwoTemplateTableRowData[] getRows() {
        return (UsageTwoTemplateTableRowData[]) super.getRows();
      }

      @Override
      public UsageTwoTemplateTableRowData rowAt(int index) {
        return (UsageTwoTemplateTableRowData) super.rowAt(index);
      }

      public void setRows(UsageTwoTemplateTableRowData[] rows) {
        super.setRows(rows);
      }

      public static class UsageTwoTemplateTableRowData extends TemplateTableRowData {

        private static final long serialVersionUID = 1L;
        public static final String third = "third";
        private String m_third;

        public UsageTwoTemplateTableRowData() {
        }

        public String getThird() {
          return m_third;
        }

        public void setThird(String third) {
          m_third = third;
        }
      }
    }
  }

  public static class UsualString extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public UsualString() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }
}
