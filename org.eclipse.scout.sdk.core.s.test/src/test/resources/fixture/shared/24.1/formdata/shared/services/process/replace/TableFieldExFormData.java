/*
 * Copyright (c) 2010, 2023 BSI Business Systems Integration AG
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package formdata.shared.services.process.replace;

import jakarta.annotation.Generated;

import org.eclipse.scout.rt.platform.Replace;
import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 */
@Generated(value = "formdata.client.ui.forms.replace.TableFieldExForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class TableFieldExFormData extends TableFieldBaseFormData {

  private static final long serialVersionUID = 1L;

  public EmptyTableExtended getEmptyTableExtended() {
    return getFieldByClass(EmptyTableExtended.class);
  }

  public ExtendedAddress getExtendedAddress() {
    return getFieldByClass(ExtendedAddress.class);
  }

  public ExtendedPersonTable getExtendedPersonTable() {
    return getFieldByClass(ExtendedPersonTable.class);
  }

  public NoTableExtended getNoTableExtended() {
    return getFieldByClass(NoTableExtended.class);
  }

  public TableExtended getTableExtended() {
    return getFieldByClass(TableExtended.class);
  }

  @Replace
  public static class EmptyTableExtended extends EmptyTable {

    private static final long serialVersionUID = 1L;

    @Override
    public EmptyTableExtendedRowData addRow() {
      return (EmptyTableExtendedRowData) super.addRow();
    }

    @Override
    public EmptyTableExtendedRowData addRow(int rowState) {
      return (EmptyTableExtendedRowData) super.addRow(rowState);
    }

    @Override
    public EmptyTableExtendedRowData createRow() {
      return new EmptyTableExtendedRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return EmptyTableExtendedRowData.class;
    }

    @Override
    public EmptyTableExtendedRowData[] getRows() {
      return (EmptyTableExtendedRowData[]) super.getRows();
    }

    @Override
    public EmptyTableExtendedRowData rowAt(int index) {
      return (EmptyTableExtendedRowData) super.rowAt(index);
    }

    public void setRows(EmptyTableExtendedRowData[] rows) {
      super.setRows(rows);
    }

    public static class EmptyTableExtendedRowData extends formdata.shared.services.process.replace.TableFieldBaseFormData.EmptyTable.EmptyTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String single = "single";
      private String m_single;

      public String getSingle() {
        return m_single;
      }

      public void setSingle(String newSingle) {
        m_single = newSingle;
      }
    }
  }

  @Replace
  public static class ExtendedAddress extends AddressTable {

    private static final long serialVersionUID = 1L;

    @Override
    public ExtendedAddressRowData addRow() {
      return (ExtendedAddressRowData) super.addRow();
    }

    @Override
    public ExtendedAddressRowData addRow(int rowState) {
      return (ExtendedAddressRowData) super.addRow(rowState);
    }

    @Override
    public ExtendedAddressRowData createRow() {
      return new ExtendedAddressRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return ExtendedAddressRowData.class;
    }

    @Override
    public ExtendedAddressRowData[] getRows() {
      return (ExtendedAddressRowData[]) super.getRows();
    }

    @Override
    public ExtendedAddressRowData rowAt(int index) {
      return (ExtendedAddressRowData) super.rowAt(index);
    }

    public void setRows(ExtendedAddressRowData[] rows) {
      super.setRows(rows);
    }

    public static class ExtendedAddressRowData extends formdata.shared.services.process.replace.TableFieldBaseFormData.AddressTable.AddressTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String state = "state";
      private String m_state;

      public String getState() {
        return m_state;
      }

      public void setState(String newState) {
        m_state = newState;
      }
    }
  }

  @Replace
  public static class ExtendedPersonTable extends PersonTable {

    private static final long serialVersionUID = 1L;

    @Override
    public ExtendedPersonTableRowData addRow() {
      return (ExtendedPersonTableRowData) super.addRow();
    }

    @Override
    public ExtendedPersonTableRowData addRow(int rowState) {
      return (ExtendedPersonTableRowData) super.addRow(rowState);
    }

    @Override
    public ExtendedPersonTableRowData createRow() {
      return new ExtendedPersonTableRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return ExtendedPersonTableRowData.class;
    }

    @Override
    public ExtendedPersonTableRowData[] getRows() {
      return (ExtendedPersonTableRowData[]) super.getRows();
    }

    @Override
    public ExtendedPersonTableRowData rowAt(int index) {
      return (ExtendedPersonTableRowData) super.rowAt(index);
    }

    public void setRows(ExtendedPersonTableRowData[] rows) {
      super.setRows(rows);
    }

    public static class ExtendedPersonTableRowData extends formdata.shared.services.process.replace.TableFieldBaseFormData.PersonTable.PersonTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String lastName = "lastName";
      private String m_lastName;

      public String getLastName() {
        return m_lastName;
      }

      public void setLastName(String newLastName) {
        m_lastName = newLastName;
      }
    }
  }

  @Replace
  public static class NoTableExtended extends NoTable {

    private static final long serialVersionUID = 1L;

    @Override
    public NoTableExtendedRowData addRow() {
      return (NoTableExtendedRowData) super.addRow();
    }

    @Override
    public NoTableExtendedRowData addRow(int rowState) {
      return (NoTableExtendedRowData) super.addRow(rowState);
    }

    @Override
    public NoTableExtendedRowData createRow() {
      return new NoTableExtendedRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return NoTableExtendedRowData.class;
    }

    @Override
    public NoTableExtendedRowData[] getRows() {
      return (NoTableExtendedRowData[]) super.getRows();
    }

    @Override
    public NoTableExtendedRowData rowAt(int index) {
      return (NoTableExtendedRowData) super.rowAt(index);
    }

    public void setRows(NoTableExtendedRowData[] rows) {
      super.setRows(rows);
    }

    public static class NoTableExtendedRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String new_ = "new";
      private String m_new;

      public String getNew() {
        return m_new;
      }

      public void setNew(String newNew) {
        m_new = newNew;
      }
    }
  }

  @Replace
  public static class TableExtended extends Table {

    private static final long serialVersionUID = 1L;

    @Override
    public TableExtendedRowData addRow() {
      return (TableExtendedRowData) super.addRow();
    }

    @Override
    public TableExtendedRowData addRow(int rowState) {
      return (TableExtendedRowData) super.addRow(rowState);
    }

    @Override
    public TableExtendedRowData createRow() {
      return new TableExtendedRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return TableExtendedRowData.class;
    }

    @Override
    public TableExtendedRowData[] getRows() {
      return (TableExtendedRowData[]) super.getRows();
    }

    @Override
    public TableExtendedRowData rowAt(int index) {
      return (TableExtendedRowData) super.rowAt(index);
    }

    public void setRows(TableExtendedRowData[] rows) {
      super.setRows(rows);
    }

    public static class TableExtendedRowData extends formdata.shared.services.process.replace.TableFieldBaseFormData.Table.TableRowData {

      private static final long serialVersionUID = 1L;
      public static final String boolean_ = "boolean";
      private Boolean m_boolean;

      public Boolean getBoolean() {
        return m_boolean;
      }

      public void setBoolean(Boolean newBoolean) {
        m_boolean = newBoolean;
      }
    }
  }
}
