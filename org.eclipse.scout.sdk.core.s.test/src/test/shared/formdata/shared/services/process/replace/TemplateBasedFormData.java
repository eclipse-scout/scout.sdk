/*
 * Copyright (c) 2010, 2023 BSI Business Systems Integration AG
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package formdata.shared.services.process.replace;

import javax.annotation.Generated;

import org.eclipse.scout.rt.platform.Replace;
import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 */
@Generated(value = "formdata.client.ui.template.formfield.replace.TemplateBasedForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class TemplateBasedFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public UsageOneBox getUsageOneBox() {
    return getFieldByClass(UsageOneBox.class);
  }

  public UsageTwoBox getUsageTwoBox() {
    return getFieldByClass(UsageTwoBox.class);
  }

  public UsualString getUsualString() {
    return getFieldByClass(UsualString.class);
  }

  public static class UsageOneBox extends AbstractTemplateForReplaceBoxData {

    private static final long serialVersionUID = 1L;

    public UsageOneString getUsageOneString() {
      return getFieldByClass(UsageOneString.class);
    }

    public static class UsageOneString extends AbstractValueFieldData<String> {

      private static final long serialVersionUID = 1L;
    }
  }

  public static class UsageTwoBox extends AbstractTemplateForReplaceBoxData {

    private static final long serialVersionUID = 1L;

    public UsageTwoTemplateTable getUsageTwoTemplateTable() {
      return getFieldByClass(UsageTwoTemplateTable.class);
    }

    @Replace
    public static class UsageTwoTemplateTable extends TemplateTable {

      private static final long serialVersionUID = 1L;

      @Override
      public UsageTwoTemplateTableRowData addRow() {
        return (UsageTwoTemplateTableRowData) super.addRow();
      }

      @Override
      public UsageTwoTemplateTableRowData addRow(int rowState) {
        return (UsageTwoTemplateTableRowData) super.addRow(rowState);
      }

      @Override
      public UsageTwoTemplateTableRowData createRow() {
        return new UsageTwoTemplateTableRowData();
      }

      @Override
      public Class<? extends AbstractTableRowData> getRowType() {
        return UsageTwoTemplateTableRowData.class;
      }

      @Override
      public UsageTwoTemplateTableRowData[] getRows() {
        return (UsageTwoTemplateTableRowData[]) super.getRows();
      }

      @Override
      public UsageTwoTemplateTableRowData rowAt(int index) {
        return (UsageTwoTemplateTableRowData) super.rowAt(index);
      }

      public void setRows(UsageTwoTemplateTableRowData[] rows) {
        super.setRows(rows);
      }

      public static class UsageTwoTemplateTableRowData extends formdata.shared.services.process.replace.AbstractTemplateForReplaceBoxData.TemplateTable.TemplateTableRowData {

        private static final long serialVersionUID = 1L;
        public static final String third = "third";
        private String m_third;

        public String getThird() {
          return m_third;
        }

        public void setThird(String newThird) {
          m_third = newThird;
        }
      }
    }
  }

  public static class UsualString extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;
  }
}
